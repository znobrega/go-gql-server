scalar Time
scalar Map
# Types
type User {
  id: ID!
  email: String!
  userId: String
  name: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
  createdAt: Time!
  updatedAt: Time
}

# Input Types
input UserInput {
  email: String
  userId: String
  displayName: String
  name: String
  firstName: String
  lastName: String
  nickName: String
  description: String
  location: String
}

# List Types
type Users {
  count: Int # You want to return count for a grid for example
  list: [User!]! # that is why we need to specify the users object this way
}

type Video {
  ID: ID!
  url: String!
  title: String!
}

type Videos {
  count: Int
  list: [Video!]!
}

type Post {
  ID: ID!
  url: String!
  title: String!
  comment: String!
}

type Posts {
  count: Int,
  list: [Post!]!
}

# Define mutations here
type Mutation {
  createUser(input: UserInput!): User!
  updateUser(id: ID! , input: UserInput!): User!
  deleteUser(id: ID!): Boolean!
}

type TransacoesFaturas {
  id: ID!
  ds_transacao: String!
}

type PageInfo {
  startCursor: String
  endCursor: String
  hasNextPage: String
  hasBeforePage: String
  beforeCursor: String
  nextCursor: String
}

type Order {
  ID: ID!
  customerName: String!
  amount: Float!
  orderAmount: Float!
}

type Orders {
  count: Int,
  page: Int,
  limit: Int,
  list: [Order!]!
  pageInfo: PageInfo
  !
}

# input DefaultInput {
#   limit: Int = 10,
#   page: Int = 1,
#   filter: Map
# }

type Query {
  orders(limit: Int = 10, page: Int = 1, filter: Map): Orders!
  users(id: ID): Users!
  videos(id: ID): Videos!
  posts (id: ID): Posts!
  order: Order!
  transacoes(id: ID = 9999, name: String = "ARGUMENTO VAZIO"): TransacoesFaturas!
}